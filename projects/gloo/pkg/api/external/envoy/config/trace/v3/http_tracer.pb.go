// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/http_tracer.proto

package v3

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/solo-io/gloo/projects/gloo/pkg/api/external/udpa/annotations"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// The tracing configuration specifies settings for an HTTP tracer provider used by Envoy.
//
// Envoy may support other tracers in the future, but right now the HTTP tracer is the only one
// supported.
//
// .. attention::
//
//   Use of this message type has been deprecated in favor of direct use of
//   :ref:`Tracing.Http <envoy_api_msg_config.trace.v3.Tracing.Http>`.
type Tracing struct {
	// Provides configuration for the HTTP tracer.
	Http                 *Tracing_Http `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Tracing) Reset()         { *m = Tracing{} }
func (m *Tracing) String() string { return proto.CompactTextString(m) }
func (*Tracing) ProtoMessage()    {}
func (*Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_e93f4da96f5d6b2b, []int{0}
}
func (m *Tracing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracing.Unmarshal(m, b)
}
func (m *Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracing.Marshal(b, m, deterministic)
}
func (m *Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracing.Merge(m, src)
}
func (m *Tracing) XXX_Size() int {
	return xxx_messageInfo_Tracing.Size(m)
}
func (m *Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_Tracing proto.InternalMessageInfo

func (m *Tracing) GetHttp() *Tracing_Http {
	if m != nil {
		return m.Http
	}
	return nil
}

// Configuration for an HTTP tracer provider used by Envoy.
//
// The configuration is defined by the
// :ref:`HttpConnectionManager.Tracing <envoy_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing>`
// :ref:`provider <envoy_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider>`
// field.
type Tracing_Http struct {
	// The name of the HTTP trace driver to instantiate. The name must match a
	// supported HTTP trace driver. Built-in trace drivers:
	//
	// - *envoy.tracers.lightstep*
	// - *envoy.tracers.zipkin*
	// - *envoy.tracers.dynamic_ot*
	// - *envoy.tracers.datadog*
	// - *envoy.tracers.opencensus*
	// - *envoy.tracers.xray*
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Trace driver specific configuration which depends on the driver being instantiated.
	// See the trace drivers for examples:
	//
	// - :ref:`LightstepConfig <envoy_api_msg_config.trace.v3.LightstepConfig>`
	// - :ref:`ZipkinConfig <envoy_api_msg_config.trace.v3.ZipkinConfig>`
	// - :ref:`DynamicOtConfig <envoy_api_msg_config.trace.v3.DynamicOtConfig>`
	// - :ref:`DatadogConfig <envoy_api_msg_config.trace.v3.DatadogConfig>`
	// - :ref:`OpenCensusConfig <envoy_api_msg_config.trace.v3.OpenCensusConfig>`
	// - :ref:`AWS X-Ray <envoy_api_msg_config.trace.v3.XRayConfig>`
	//
	// Types that are valid to be assigned to ConfigType:
	//	*Tracing_Http_TypedConfig
	ConfigType           isTracing_Http_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Tracing_Http) Reset()         { *m = Tracing_Http{} }
func (m *Tracing_Http) String() string { return proto.CompactTextString(m) }
func (*Tracing_Http) ProtoMessage()    {}
func (*Tracing_Http) Descriptor() ([]byte, []int) {
	return fileDescriptor_e93f4da96f5d6b2b, []int{0, 0}
}
func (m *Tracing_Http) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracing_Http.Unmarshal(m, b)
}
func (m *Tracing_Http) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracing_Http.Marshal(b, m, deterministic)
}
func (m *Tracing_Http) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracing_Http.Merge(m, src)
}
func (m *Tracing_Http) XXX_Size() int {
	return xxx_messageInfo_Tracing_Http.Size(m)
}
func (m *Tracing_Http) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracing_Http.DiscardUnknown(m)
}

var xxx_messageInfo_Tracing_Http proto.InternalMessageInfo

type isTracing_Http_ConfigType interface {
	isTracing_Http_ConfigType()
	Equal(interface{}) bool
}

type Tracing_Http_TypedConfig struct {
	TypedConfig *types.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof" json:"typed_config,omitempty"`
}

func (*Tracing_Http_TypedConfig) isTracing_Http_ConfigType() {}

func (m *Tracing_Http) GetConfigType() isTracing_Http_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *Tracing_Http) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tracing_Http) GetTypedConfig() *types.Any {
	if x, ok := m.GetConfigType().(*Tracing_Http_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Tracing_Http) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Tracing_Http_TypedConfig)(nil),
	}
}

func init() {
	proto.RegisterType((*Tracing)(nil), "envoy.config.trace.v3.Tracing")
	proto.RegisterType((*Tracing_Http)(nil), "envoy.config.trace.v3.Tracing.Http")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/external/envoy/config/trace/v3/http_tracer.proto", fileDescriptor_e93f4da96f5d6b2b)
}

var fileDescriptor_e93f4da96f5d6b2b = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0xc5, 0x3e, 0x2b, 0x07, 0x1b, 0x10, 0x91, 0x75, 0x88, 0x23, 0x70, 0x07, 0xdc, 0x5d, 0x01,
	0x05, 0xbb, 0xd2, 0xa5, 0x40, 0xa4, 0xc3, 0x34, 0x11, 0xa2, 0x88, 0xac, 0x54, 0x69, 0xa2, 0x8d,
	0xb3, 0xd9, 0x2c, 0x38, 0x3b, 0xab, 0xf5, 0xd8, 0x8a, 0x3b, 0x4a, 0x5a, 0x28, 0xf9, 0x00, 0xc4,
	0x37, 0xd0, 0x23, 0xd1, 0xf2, 0x0b, 0x7c, 0x06, 0x15, 0xf2, 0xae, 0x53, 0x00, 0xd1, 0x29, 0xdd,
	0xcc, 0xbc, 0x37, 0x6f, 0x66, 0x9e, 0x86, 0x4c, 0xa5, 0xc2, 0x55, 0x39, 0xa7, 0x19, 0xac, 0x59,
	0x01, 0x39, 0x3c, 0x53, 0xc0, 0x64, 0x0e, 0xc0, 0x8c, 0x85, 0xb7, 0x22, 0xc3, 0xc2, 0x67, 0xdc,
	0x28, 0x26, 0x36, 0x28, 0xac, 0xe6, 0x39, 0x13, 0xba, 0x82, 0x9a, 0x65, 0xa0, 0x97, 0x4a, 0x32,
	0xb4, 0x3c, 0x13, 0xac, 0x1a, 0xb0, 0x15, 0xa2, 0x99, 0xb9, 0xcc, 0x52, 0x63, 0x01, 0x21, 0xbe,
	0xe3, 0x88, 0xd4, 0x13, 0xa9, 0x83, 0x68, 0x35, 0xe8, 0xdf, 0x93, 0x00, 0x32, 0x17, 0xcc, 0x91,
	0xe6, 0xe5, 0x92, 0x71, 0x5d, 0xfb, 0x8e, 0xfe, 0x83, 0x7f, 0xa1, 0x02, 0x6d, 0x99, 0x61, 0x8b,
	0x9e, 0x94, 0x0b, 0xc3, 0x19, 0xd7, 0x1a, 0x90, 0xa3, 0x02, 0x5d, 0xb0, 0x02, 0x39, 0x96, 0x45,
	0x0b, 0x3f, 0xfe, 0x0f, 0xae, 0x84, 0x2d, 0x14, 0x68, 0xa5, 0x65, 0x4b, 0xb9, 0x5b, 0xf1, 0x5c,
	0x2d, 0x38, 0x0a, 0xb6, 0x0d, 0x5a, 0xe0, 0x48, 0x82, 0x04, 0x17, 0xb2, 0x26, 0xf2, 0xd5, 0xb3,
	0x8f, 0x21, 0x39, 0x9c, 0x58, 0x9e, 0x29, 0x2d, 0xe3, 0xe7, 0x24, 0x6a, 0x2e, 0x3c, 0x0e, 0x1e,
	0x05, 0x4f, 0xba, 0x97, 0xe7, 0x74, 0xe7, 0x6d, 0xb4, 0x65, 0xd3, 0x11, 0xa2, 0x49, 0x5d, 0x43,
	0xff, 0x4b, 0x40, 0xa2, 0x26, 0x8d, 0xef, 0x93, 0x48, 0xf3, 0xb5, 0x70, 0x0a, 0x37, 0x92, 0xc3,
	0xdf, 0x49, 0x64, 0xc3, 0x5e, 0x90, 0xba, 0x62, 0xfc, 0x82, 0xdc, 0xc4, 0xda, 0x88, 0xc5, 0xcc,
	0x2b, 0x1e, 0x1f, 0xb8, 0x31, 0x47, 0xd4, 0x1b, 0x42, 0xb7, 0x86, 0xd0, 0x97, 0xba, 0x1e, 0x5d,
	0x4b, 0xbb, 0x8e, 0xfb, 0xca, 0x51, 0x87, 0x4f, 0x3f, 0x7f, 0xff, 0x70, 0x7a, 0x41, 0xce, 0x76,
	0x6d, 0x74, 0xf9, 0xd7, 0x46, 0xc9, 0x2d, 0xd2, 0xf5, 0xf8, 0xac, 0x11, 0x78, 0x1d, 0x5d, 0x0f,
	0x7b, 0x07, 0x69, 0xc7, 0x97, 0x86, 0x17, 0x8d, 0xce, 0x43, 0x72, 0x72, 0xa5, 0x4e, 0xf2, 0x29,
	0xf8, 0xfa, 0xeb, 0x34, 0xf8, 0xf6, 0xfe, 0xc7, 0xcf, 0x4e, 0xd8, 0x0b, 0xc9, 0xb9, 0x02, 0x6f,
	0x85, 0xb1, 0xb0, 0xa9, 0x77, 0xbb, 0x92, 0xdc, 0x6e, 0x86, 0x4f, 0xdc, 0x6b, 0x8c, 0x9b, 0x43,
	0xc6, 0xc1, 0xf4, 0xcd, 0x7e, 0x7f, 0x67, 0xde, 0xc9, 0x3d, 0x7e, 0x6f, 0xde, 0x71, 0xfe, 0x0c,
	0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x66, 0x3f, 0x0c, 0xae, 0xce, 0x02, 0x00, 0x00,
}

func (this *Tracing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tracing)
	if !ok {
		that2, ok := that.(Tracing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Tracing_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tracing_Http)
	if !ok {
		that2, ok := that.(Tracing_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if that1.ConfigType == nil {
		if this.ConfigType != nil {
			return false
		}
	} else if this.ConfigType == nil {
		return false
	} else if !this.ConfigType.Equal(that1.ConfigType) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Tracing_Http_TypedConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tracing_Http_TypedConfig)
	if !ok {
		that2, ok := that.(Tracing_Http_TypedConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TypedConfig.Equal(that1.TypedConfig) {
		return false
	}
	return true
}
